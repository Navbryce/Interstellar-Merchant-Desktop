@startuml

title UML Diagram (if relationship multiplicity not stated, assume 1 to 1)

class GameController << (S,#FF7700) Singleton >>
{
  + getPlayer(): Player
  + getUniverse(): Universe
  + getTravelController(): TravelController
  + getDatabase(): Database
  + getTimeController(): TimeController
  + serialization(): String
}

package repository {
    interface Database {
        + deleteSave(saveName: String): boolean
        + getAvailableSaves(): Collection<SaveOverview>
        + getSave(saveName: String): SaveState
        + storeSave(saveState: SaveState): Void
    }
    class MockDatabase {
    }
    class MongodbDatabase {
    }

    GameController -- Database : > Can access
    Database <|.. MockDatabase
    Database <|.. MongodbDatabase

    package save_state {
        class SaveOverview {
            + name: String
            + lastModified: Date
        }
        class SaveState {
            + {static} saveJSONFactory(): SaveState
            + name: String
            + lastModified: Date
            + player: Player
            + timeController: TimeController
            + universe: Universe
            + getSerialization(): String

        }
    }


}

package player {
    package game_config {
        class GameConfig {
          + getDatabase(): Database
          + getPlayer(): Player
          + getUniverse(): Universe
          + getTravelController(): TravelController
          + getSaveState(): SaveState
        }

        enum Difficulty {
        }
        GameConfig -- Difficulty : > Contains

    }

    class Player << (S,#FF7700) Singleton >> {
        +name: String
        +skills: Int[]
    }


    package ship {
        class Ship {
            +fuel: Int
        }
        enum ShipType {
        }
        Ship -- ShipType : > Stores

    }

     Player -- GameConfig : > Stores

     Player -- Ship : > Owns

}
package utilities {
    abstract class Inventory {
        +capacity: Int {read only}
        +plusAssign(items: List<Item, Int>): Void
        +minusAssign(items: List<Item, Int>): Void
        +contains(items: List<Item, Int>): Void
    }
    enum Item {
        +minTechLevel: Tech
        +minRsourceLevel: Resource
        +basePrice: Int
        +variance: Double
    }
    Inventory "Many" o-- "1" Item : Contains <

}

package universe {

    package time {
            class TimeController {
                + day: int
                + timeJump(days: Int): Void
                + subscribeToTime(subscriber: TimeSubScriberI): Void
                + unsubscribe(subscriber: TimeSubScriberI): Void

            }

            interface TimeSubscriberI {
                + dayUpdated(day: Int): Boolean
                + onSubscribe(day: Int): Void
                + onUnsubscribe(day: Int): Void
            }

            TimeController "1" o-- "0..*" TimeSubscriberI : Keeps track >
            GameController -- TimeController : > Contains

    }
      class Universe {
          + getSystems(): SolarSystem[]
          + toString(): String
     }

     class SolarSystem {
        +x: int
        +y: int

     }
     class Planet {
     }


     enum Resource {

     }

     enum Tech {

     }

      Planet -- Resource : > Described by
      Planet -- Tech : > Described by
      Planet -- PlanetEconomy : > Described by



      package events {
          interface Event {
              + eventExpired(): Boolean
          }

          package planet_events {
              class PlanetEvent {

              }
              Event <|.. PlanetEvent
              TimeSubscriberI <|.. PlanetEvent
              TimeSubscriberI <|.. Planet

              Planet "1" o-- "0..*" PlanetEvent : Keeps track >


              enum PlanetEventType {
              }

              PlanetEvent -- PlanetEventType : > described by

          }
      }

     package market {
        interface Economy {
            {abstract} + canBuyItems()
            {abstract} + canBuyItem()
            {abstract} + calculatePrice()
            {abstract} + filterItems()
            {abstract} + calculateQuantity()
            {abstract} + getEconomyName()
        }

        class Market {
            + buy(order: Order, player: Player): OrderStatus
            + sell(order: Order, player: Player): OrderStatus
        }

        package items {
            class MarketItem {
                + item: Item
                + price: int
                + priceHistory: List<Int>
            }

            class Order {
                +order: Map<Item, Int>
                +quantity: Int
                +price: Int
            }

        }
     }


    Universe "Many" o-- "1" SolarSystem : Contains >
    SolarSystem "Many" o-- "1" Planet : Contains <
    Planet -- Market : > owns
    Economy <|.. PlanetEconomy


    Market -- Economy : > Given
    Market -- MarketItem : > Logs
}

package travel {
      class TravelController << (S,#FF7700) Singleton >> {
          + setLocationWithoutPenalty(entity: LocationEntity, location: Location): Void
          + travel(entity: LocationEntity, location: Location): Location
      }

      class Trip {
        + startingLocation: Planet
        + endingLocation: Planet
        + fuelCost: Int
      }
      TravelController -- Universe : Can access

      abstract class Location {
        + x: Int
        + y: Int
        + solarSystem: SolarSystem
      }

      abstract class LocationEntity {
        + currentLocation: Location
        + locationHistory: List<Location>
      }
      LocationEntity <|-- Player
      Location <|-- Planet

}

Inventory <|-- Ship
Inventory <|-- Market

GameController -- Universe : > has
GameController -- Player : > has
GameController -- TravelController : > has







@enduml